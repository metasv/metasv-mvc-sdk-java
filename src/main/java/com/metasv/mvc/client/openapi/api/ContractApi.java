/*
 * MetaSV for MVC API Spec
 * API definition for MetaSV provided apis
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: heqiming@metasv.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.metasv.mvc.client.openapi.api;

import com.metasv.mvc.client.openapi.ApiCallback;
import com.metasv.mvc.client.openapi.ApiClient;
import com.metasv.mvc.client.openapi.ApiException;
import com.metasv.mvc.client.openapi.ApiResponse;
import com.metasv.mvc.client.openapi.Configuration;
import com.metasv.mvc.client.openapi.Pair;
import com.metasv.mvc.client.openapi.ProgressRequestBody;
import com.metasv.mvc.client.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.metasv.mvc.client.openapi.model.ContractFtBalance;
import com.metasv.mvc.client.openapi.model.ContractFtUtxo;
import com.metasv.mvc.client.openapi.model.ContractNftAddressSummary;
import com.metasv.mvc.client.openapi.model.ContractNftAuctionUtxo;
import com.metasv.mvc.client.openapi.model.ContractNftGenesisSummary;
import com.metasv.mvc.client.openapi.model.ContractNftSellUtxo;
import com.metasv.mvc.client.openapi.model.ContractNftSellV2Utxo;
import com.metasv.mvc.client.openapi.model.ContractNftUtxo;
import com.metasv.mvc.client.openapi.model.ContractUniqueUtxo;
import com.metasv.mvc.client.openapi.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContractApi {
    private ApiClient localVarApiClient;

    public ContractApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContractApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for contractFtAddressAddressBalanceConfirmedGet
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (required)
     * @param genesis Filter by contract genesis (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract ft balances succes（ingore unconfirmed txs）. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractFtAddressAddressBalanceConfirmedGetCall(String address, String codeHash, String genesis, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/ft/address/{address}/balance/confirmed"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeHash", codeHash));
        }

        if (genesis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genesis", genesis));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractFtAddressAddressBalanceConfirmedGetValidateBeforeCall(String address, String codeHash, String genesis, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling contractFtAddressAddressBalanceConfirmedGet(Async)");
        }
        
        // verify the required parameter 'codeHash' is set
        if (codeHash == null) {
            throw new ApiException("Missing the required parameter 'codeHash' when calling contractFtAddressAddressBalanceConfirmedGet(Async)");
        }
        
        // verify the required parameter 'genesis' is set
        if (genesis == null) {
            throw new ApiException("Missing the required parameter 'genesis' when calling contractFtAddressAddressBalanceConfirmedGet(Async)");
        }
        

        okhttp3.Call localVarCall = contractFtAddressAddressBalanceConfirmedGetCall(address, codeHash, genesis, _callback);
        return localVarCall;

    }

    /**
     * Get all contract token balances for specific address ignoring all unconfirmed txs.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (required)
     * @param genesis Filter by contract genesis (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract ft balances succes（ingore unconfirmed txs）. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public Long contractFtAddressAddressBalanceConfirmedGet(String address, String codeHash, String genesis) throws ApiException {
        ApiResponse<Long> localVarResp = contractFtAddressAddressBalanceConfirmedGetWithHttpInfo(address, codeHash, genesis);
        return localVarResp.getData();
    }

    /**
     * Get all contract token balances for specific address ignoring all unconfirmed txs.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (required)
     * @param genesis Filter by contract genesis (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract ft balances succes（ingore unconfirmed txs）. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> contractFtAddressAddressBalanceConfirmedGetWithHttpInfo(String address, String codeHash, String genesis) throws ApiException {
        okhttp3.Call localVarCall = contractFtAddressAddressBalanceConfirmedGetValidateBeforeCall(address, codeHash, genesis, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all contract token balances for specific address ignoring all unconfirmed txs. (asynchronously)
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (required)
     * @param genesis Filter by contract genesis (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract ft balances succes（ingore unconfirmed txs）. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractFtAddressAddressBalanceConfirmedGetAsync(String address, String codeHash, String genesis, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractFtAddressAddressBalanceConfirmedGetValidateBeforeCall(address, codeHash, genesis, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractFtAddressAddressBalanceGet
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract ft balances success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractFtAddressAddressBalanceGetCall(String address, String codeHash, String genesis, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/ft/address/{address}/balance"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeHash", codeHash));
        }

        if (genesis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genesis", genesis));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractFtAddressAddressBalanceGetValidateBeforeCall(String address, String codeHash, String genesis, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling contractFtAddressAddressBalanceGet(Async)");
        }
        

        okhttp3.Call localVarCall = contractFtAddressAddressBalanceGetCall(address, codeHash, genesis, _callback);
        return localVarCall;

    }

    /**
     * Get all contract token balances for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @return List&lt;ContractFtBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract ft balances success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public List<ContractFtBalance> contractFtAddressAddressBalanceGet(String address, String codeHash, String genesis) throws ApiException {
        ApiResponse<List<ContractFtBalance>> localVarResp = contractFtAddressAddressBalanceGetWithHttpInfo(address, codeHash, genesis);
        return localVarResp.getData();
    }

    /**
     * Get all contract token balances for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @return ApiResponse&lt;List&lt;ContractFtBalance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract ft balances success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContractFtBalance>> contractFtAddressAddressBalanceGetWithHttpInfo(String address, String codeHash, String genesis) throws ApiException {
        okhttp3.Call localVarCall = contractFtAddressAddressBalanceGetValidateBeforeCall(address, codeHash, genesis, null);
        Type localVarReturnType = new TypeToken<List<ContractFtBalance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all contract token balances for specific address. (asynchronously)
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract ft balances success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractFtAddressAddressBalanceGetAsync(String address, String codeHash, String genesis, final ApiCallback<List<ContractFtBalance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractFtAddressAddressBalanceGetValidateBeforeCall(address, codeHash, genesis, _callback);
        Type localVarReturnType = new TypeToken<List<ContractFtBalance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractFtAddressAddressUtxoGet
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract ft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractFtAddressAddressUtxoGetCall(String address, String codeHash, String genesis, String flag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/ft/address/{address}/utxo"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeHash", codeHash));
        }

        if (genesis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genesis", genesis));
        }

        if (flag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flag", flag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractFtAddressAddressUtxoGetValidateBeforeCall(String address, String codeHash, String genesis, String flag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling contractFtAddressAddressUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = contractFtAddressAddressUtxoGetCall(address, codeHash, genesis, flag, _callback);
        return localVarCall;

    }

    /**
     * Get all contract token utxos for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @return List&lt;ContractFtUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract ft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public List<ContractFtUtxo> contractFtAddressAddressUtxoGet(String address, String codeHash, String genesis, String flag) throws ApiException {
        ApiResponse<List<ContractFtUtxo>> localVarResp = contractFtAddressAddressUtxoGetWithHttpInfo(address, codeHash, genesis, flag);
        return localVarResp.getData();
    }

    /**
     * Get all contract token utxos for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @return ApiResponse&lt;List&lt;ContractFtUtxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract ft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContractFtUtxo>> contractFtAddressAddressUtxoGetWithHttpInfo(String address, String codeHash, String genesis, String flag) throws ApiException {
        okhttp3.Call localVarCall = contractFtAddressAddressUtxoGetValidateBeforeCall(address, codeHash, genesis, flag, null);
        Type localVarReturnType = new TypeToken<List<ContractFtUtxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all contract token utxos for specific address. (asynchronously)
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract ft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractFtAddressAddressUtxoGetAsync(String address, String codeHash, String genesis, String flag, final ApiCallback<List<ContractFtUtxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractFtAddressAddressUtxoGetValidateBeforeCall(address, codeHash, genesis, flag, _callback);
        Type localVarReturnType = new TypeToken<List<ContractFtUtxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractNftAddressAddressCountConfirmedGet
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (required)
     * @param genesis Filter by contract genesis (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftAddressAddressCountConfirmedGetCall(String address, String codeHash, String genesis, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/nft/address/{address}/count/confirmed"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeHash", codeHash));
        }

        if (genesis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genesis", genesis));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractNftAddressAddressCountConfirmedGetValidateBeforeCall(String address, String codeHash, String genesis, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling contractNftAddressAddressCountConfirmedGet(Async)");
        }
        
        // verify the required parameter 'codeHash' is set
        if (codeHash == null) {
            throw new ApiException("Missing the required parameter 'codeHash' when calling contractNftAddressAddressCountConfirmedGet(Async)");
        }
        
        // verify the required parameter 'genesis' is set
        if (genesis == null) {
            throw new ApiException("Missing the required parameter 'genesis' when calling contractNftAddressAddressCountConfirmedGet(Async)");
        }
        

        okhttp3.Call localVarCall = contractNftAddressAddressCountConfirmedGetCall(address, codeHash, genesis, _callback);
        return localVarCall;

    }

    /**
     * Get confirmed utxo count for specific nft(ignore all unconfirmed txs).
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (required)
     * @param genesis Filter by contract genesis (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public Integer contractNftAddressAddressCountConfirmedGet(String address, String codeHash, String genesis) throws ApiException {
        ApiResponse<Integer> localVarResp = contractNftAddressAddressCountConfirmedGetWithHttpInfo(address, codeHash, genesis);
        return localVarResp.getData();
    }

    /**
     * Get confirmed utxo count for specific nft(ignore all unconfirmed txs).
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (required)
     * @param genesis Filter by contract genesis (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> contractNftAddressAddressCountConfirmedGetWithHttpInfo(String address, String codeHash, String genesis) throws ApiException {
        okhttp3.Call localVarCall = contractNftAddressAddressCountConfirmedGetValidateBeforeCall(address, codeHash, genesis, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get confirmed utxo count for specific nft(ignore all unconfirmed txs). (asynchronously)
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (required)
     * @param genesis Filter by contract genesis (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftAddressAddressCountConfirmedGetAsync(String address, String codeHash, String genesis, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractNftAddressAddressCountConfirmedGetValidateBeforeCall(address, codeHash, genesis, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractNftAddressAddressSummaryGet
     * @param address the requested address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftAddressAddressSummaryGetCall(String address, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/nft/address/{address}/summary"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractNftAddressAddressSummaryGetValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling contractNftAddressAddressSummaryGet(Async)");
        }
        

        okhttp3.Call localVarCall = contractNftAddressAddressSummaryGetCall(address, _callback);
        return localVarCall;

    }

    /**
     * Get nft summary(NFT count group by genesis) for address.
     * 
     * @param address the requested address (required)
     * @return List&lt;ContractNftAddressSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public List<ContractNftAddressSummary> contractNftAddressAddressSummaryGet(String address) throws ApiException {
        ApiResponse<List<ContractNftAddressSummary>> localVarResp = contractNftAddressAddressSummaryGetWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Get nft summary(NFT count group by genesis) for address.
     * 
     * @param address the requested address (required)
     * @return ApiResponse&lt;List&lt;ContractNftAddressSummary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContractNftAddressSummary>> contractNftAddressAddressSummaryGetWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = contractNftAddressAddressSummaryGetValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<List<ContractNftAddressSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get nft summary(NFT count group by genesis) for address. (asynchronously)
     * 
     * @param address the requested address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftAddressAddressSummaryGetAsync(String address, final ApiCallback<List<ContractNftAddressSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractNftAddressAddressSummaryGetValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<List<ContractNftAddressSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractNftAddressAddressUtxoGet
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param limit Limit the return count(no more than 300) (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftAddressAddressUtxoGetCall(String address, String codeHash, String genesis, Integer limit, String flag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/nft/address/{address}/utxo"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeHash", codeHash));
        }

        if (genesis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genesis", genesis));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (flag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flag", flag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractNftAddressAddressUtxoGetValidateBeforeCall(String address, String codeHash, String genesis, Integer limit, String flag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling contractNftAddressAddressUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = contractNftAddressAddressUtxoGetCall(address, codeHash, genesis, limit, flag, _callback);
        return localVarCall;

    }

    /**
     * Get all contract nft token utxos for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param limit Limit the return count(no more than 300) (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @return List&lt;ContractNftUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public List<ContractNftUtxo> contractNftAddressAddressUtxoGet(String address, String codeHash, String genesis, Integer limit, String flag) throws ApiException {
        ApiResponse<List<ContractNftUtxo>> localVarResp = contractNftAddressAddressUtxoGetWithHttpInfo(address, codeHash, genesis, limit, flag);
        return localVarResp.getData();
    }

    /**
     * Get all contract nft token utxos for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param limit Limit the return count(no more than 300) (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @return ApiResponse&lt;List&lt;ContractNftUtxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContractNftUtxo>> contractNftAddressAddressUtxoGetWithHttpInfo(String address, String codeHash, String genesis, Integer limit, String flag) throws ApiException {
        okhttp3.Call localVarCall = contractNftAddressAddressUtxoGetValidateBeforeCall(address, codeHash, genesis, limit, flag, null);
        Type localVarReturnType = new TypeToken<List<ContractNftUtxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all contract nft token utxos for specific address. (asynchronously)
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param limit Limit the return count(no more than 300) (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftAddressAddressUtxoGetAsync(String address, String codeHash, String genesis, Integer limit, String flag, final ApiCallback<List<ContractNftUtxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractNftAddressAddressUtxoGetValidateBeforeCall(address, codeHash, genesis, limit, flag, _callback);
        Type localVarReturnType = new TypeToken<List<ContractNftUtxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractNftAuctionCodeHashCodeHashNftIdNftIdUtxoGet
     * @param codeHash Code hash of the token. (required)
     * @param nftId Nft id of this auction. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetCall(String codeHash, String nftId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/nft/auction/codeHash/{codeHash}/nftId/{nftId}/utxo"
            .replaceAll("\\{" + "codeHash" + "\\}", localVarApiClient.escapeString(codeHash.toString()))
            .replaceAll("\\{" + "nftId" + "\\}", localVarApiClient.escapeString(nftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetValidateBeforeCall(String codeHash, String nftId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeHash' is set
        if (codeHash == null) {
            throw new ApiException("Missing the required parameter 'codeHash' when calling contractNftAuctionCodeHashCodeHashNftIdNftIdUtxoGet(Async)");
        }
        
        // verify the required parameter 'nftId' is set
        if (nftId == null) {
            throw new ApiException("Missing the required parameter 'nftId' when calling contractNftAuctionCodeHashCodeHashNftIdNftIdUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = contractNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetCall(codeHash, nftId, _callback);
        return localVarCall;

    }

    /**
     * Get all contract nft token utxos by codeHash and genesisId.
     * 
     * @param codeHash Code hash of the token. (required)
     * @param nftId Nft id of this auction. (required)
     * @return List&lt;ContractNftAuctionUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public List<ContractNftAuctionUtxo> contractNftAuctionCodeHashCodeHashNftIdNftIdUtxoGet(String codeHash, String nftId) throws ApiException {
        ApiResponse<List<ContractNftAuctionUtxo>> localVarResp = contractNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetWithHttpInfo(codeHash, nftId);
        return localVarResp.getData();
    }

    /**
     * Get all contract nft token utxos by codeHash and genesisId.
     * 
     * @param codeHash Code hash of the token. (required)
     * @param nftId Nft id of this auction. (required)
     * @return ApiResponse&lt;List&lt;ContractNftAuctionUtxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContractNftAuctionUtxo>> contractNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetWithHttpInfo(String codeHash, String nftId) throws ApiException {
        okhttp3.Call localVarCall = contractNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetValidateBeforeCall(codeHash, nftId, null);
        Type localVarReturnType = new TypeToken<List<ContractNftAuctionUtxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all contract nft token utxos by codeHash and genesisId. (asynchronously)
     * 
     * @param codeHash Code hash of the token. (required)
     * @param nftId Nft id of this auction. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetAsync(String codeHash, String nftId, final ApiCallback<List<ContractNftAuctionUtxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetValidateBeforeCall(codeHash, nftId, _callback);
        Type localVarReturnType = new TypeToken<List<ContractNftAuctionUtxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractNftGenesisCodeHashGenesisSummaryGet
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success(result cached for 60s).. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftGenesisCodeHashGenesisSummaryGetCall(String codeHash, String genesis, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/nft/genesis/{codeHash}/{genesis}/summary"
            .replaceAll("\\{" + "codeHash" + "\\}", localVarApiClient.escapeString(codeHash.toString()))
            .replaceAll("\\{" + "genesis" + "\\}", localVarApiClient.escapeString(genesis.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractNftGenesisCodeHashGenesisSummaryGetValidateBeforeCall(String codeHash, String genesis, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeHash' is set
        if (codeHash == null) {
            throw new ApiException("Missing the required parameter 'codeHash' when calling contractNftGenesisCodeHashGenesisSummaryGet(Async)");
        }
        
        // verify the required parameter 'genesis' is set
        if (genesis == null) {
            throw new ApiException("Missing the required parameter 'genesis' when calling contractNftGenesisCodeHashGenesisSummaryGet(Async)");
        }
        

        okhttp3.Call localVarCall = contractNftGenesisCodeHashGenesisSummaryGetCall(codeHash, genesis, _callback);
        return localVarCall;

    }

    /**
     * Get nft summary(count group by address) for specific codeHash and genesisId(result cached for 60s).
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @return List&lt;ContractNftGenesisSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success(result cached for 60s).. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public List<ContractNftGenesisSummary> contractNftGenesisCodeHashGenesisSummaryGet(String codeHash, String genesis) throws ApiException {
        ApiResponse<List<ContractNftGenesisSummary>> localVarResp = contractNftGenesisCodeHashGenesisSummaryGetWithHttpInfo(codeHash, genesis);
        return localVarResp.getData();
    }

    /**
     * Get nft summary(count group by address) for specific codeHash and genesisId(result cached for 60s).
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @return ApiResponse&lt;List&lt;ContractNftGenesisSummary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success(result cached for 60s).. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContractNftGenesisSummary>> contractNftGenesisCodeHashGenesisSummaryGetWithHttpInfo(String codeHash, String genesis) throws ApiException {
        okhttp3.Call localVarCall = contractNftGenesisCodeHashGenesisSummaryGetValidateBeforeCall(codeHash, genesis, null);
        Type localVarReturnType = new TypeToken<List<ContractNftGenesisSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get nft summary(count group by address) for specific codeHash and genesisId(result cached for 60s). (asynchronously)
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success(result cached for 60s).. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftGenesisCodeHashGenesisSummaryGetAsync(String codeHash, String genesis, final ApiCallback<List<ContractNftGenesisSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractNftGenesisCodeHashGenesisSummaryGetValidateBeforeCall(codeHash, genesis, _callback);
        Type localVarReturnType = new TypeToken<List<ContractNftGenesisSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractNftGenesisCodeHashGenesisUtxoGet
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftGenesisCodeHashGenesisUtxoGetCall(String codeHash, String genesis, Long tokenIndex, Long max, Long min, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/nft/genesis/{codeHash}/{genesis}/utxo"
            .replaceAll("\\{" + "codeHash" + "\\}", localVarApiClient.escapeString(codeHash.toString()))
            .replaceAll("\\{" + "genesis" + "\\}", localVarApiClient.escapeString(genesis.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tokenIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tokenIndex", tokenIndex));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (min != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min", min));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractNftGenesisCodeHashGenesisUtxoGetValidateBeforeCall(String codeHash, String genesis, Long tokenIndex, Long max, Long min, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeHash' is set
        if (codeHash == null) {
            throw new ApiException("Missing the required parameter 'codeHash' when calling contractNftGenesisCodeHashGenesisUtxoGet(Async)");
        }
        
        // verify the required parameter 'genesis' is set
        if (genesis == null) {
            throw new ApiException("Missing the required parameter 'genesis' when calling contractNftGenesisCodeHashGenesisUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = contractNftGenesisCodeHashGenesisUtxoGetCall(codeHash, genesis, tokenIndex, max, min, _callback);
        return localVarCall;

    }

    /**
     * Get all contract nft token utxos by codeHash and genesisId.
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @return List&lt;ContractNftUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public List<ContractNftUtxo> contractNftGenesisCodeHashGenesisUtxoGet(String codeHash, String genesis, Long tokenIndex, Long max, Long min) throws ApiException {
        ApiResponse<List<ContractNftUtxo>> localVarResp = contractNftGenesisCodeHashGenesisUtxoGetWithHttpInfo(codeHash, genesis, tokenIndex, max, min);
        return localVarResp.getData();
    }

    /**
     * Get all contract nft token utxos by codeHash and genesisId.
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @return ApiResponse&lt;List&lt;ContractNftUtxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContractNftUtxo>> contractNftGenesisCodeHashGenesisUtxoGetWithHttpInfo(String codeHash, String genesis, Long tokenIndex, Long max, Long min) throws ApiException {
        okhttp3.Call localVarCall = contractNftGenesisCodeHashGenesisUtxoGetValidateBeforeCall(codeHash, genesis, tokenIndex, max, min, null);
        Type localVarReturnType = new TypeToken<List<ContractNftUtxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all contract nft token utxos by codeHash and genesisId. (asynchronously)
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftGenesisCodeHashGenesisUtxoGetAsync(String codeHash, String genesis, Long tokenIndex, Long max, Long min, final ApiCallback<List<ContractNftUtxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractNftGenesisCodeHashGenesisUtxoGetValidateBeforeCall(codeHash, genesis, tokenIndex, max, min, _callback);
        Type localVarReturnType = new TypeToken<List<ContractNftUtxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractNftSellAddressAddressUtxoGet
     * @param address Owner address. (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftSellAddressAddressUtxoGetCall(String address, String codeHash, String genesis, String flag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/nft/sell/address/{address}/utxo"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeHash", codeHash));
        }

        if (genesis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genesis", genesis));
        }

        if (flag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flag", flag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractNftSellAddressAddressUtxoGetValidateBeforeCall(String address, String codeHash, String genesis, String flag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling contractNftSellAddressAddressUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = contractNftSellAddressAddressUtxoGetCall(address, codeHash, genesis, flag, _callback);
        return localVarCall;

    }

    /**
     * Get all contract sell sell utxos for specific address.
     * 
     * @param address Owner address. (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @return List&lt;ContractNftSellUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public List<ContractNftSellUtxo> contractNftSellAddressAddressUtxoGet(String address, String codeHash, String genesis, String flag) throws ApiException {
        ApiResponse<List<ContractNftSellUtxo>> localVarResp = contractNftSellAddressAddressUtxoGetWithHttpInfo(address, codeHash, genesis, flag);
        return localVarResp.getData();
    }

    /**
     * Get all contract sell sell utxos for specific address.
     * 
     * @param address Owner address. (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @return ApiResponse&lt;List&lt;ContractNftSellUtxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContractNftSellUtxo>> contractNftSellAddressAddressUtxoGetWithHttpInfo(String address, String codeHash, String genesis, String flag) throws ApiException {
        okhttp3.Call localVarCall = contractNftSellAddressAddressUtxoGetValidateBeforeCall(address, codeHash, genesis, flag, null);
        Type localVarReturnType = new TypeToken<List<ContractNftSellUtxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all contract sell sell utxos for specific address. (asynchronously)
     * 
     * @param address Owner address. (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftSellAddressAddressUtxoGetAsync(String address, String codeHash, String genesis, String flag, final ApiCallback<List<ContractNftSellUtxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractNftSellAddressAddressUtxoGetValidateBeforeCall(address, codeHash, genesis, flag, _callback);
        Type localVarReturnType = new TypeToken<List<ContractNftSellUtxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractNftSellGenesisCodeHashGenesisUtxoGet
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftSellGenesisCodeHashGenesisUtxoGetCall(String codeHash, String genesis, Long tokenIndex, Long max, Long min, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/nft/sell/genesis/{codeHash}/{genesis}/utxo"
            .replaceAll("\\{" + "codeHash" + "\\}", localVarApiClient.escapeString(codeHash.toString()))
            .replaceAll("\\{" + "genesis" + "\\}", localVarApiClient.escapeString(genesis.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tokenIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tokenIndex", tokenIndex));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (min != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min", min));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractNftSellGenesisCodeHashGenesisUtxoGetValidateBeforeCall(String codeHash, String genesis, Long tokenIndex, Long max, Long min, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeHash' is set
        if (codeHash == null) {
            throw new ApiException("Missing the required parameter 'codeHash' when calling contractNftSellGenesisCodeHashGenesisUtxoGet(Async)");
        }
        
        // verify the required parameter 'genesis' is set
        if (genesis == null) {
            throw new ApiException("Missing the required parameter 'genesis' when calling contractNftSellGenesisCodeHashGenesisUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = contractNftSellGenesisCodeHashGenesisUtxoGetCall(codeHash, genesis, tokenIndex, max, min, _callback);
        return localVarCall;

    }

    /**
     * Get all contract nft token utxos by codeHash and genesisId.
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @return List&lt;ContractNftSellUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public List<ContractNftSellUtxo> contractNftSellGenesisCodeHashGenesisUtxoGet(String codeHash, String genesis, Long tokenIndex, Long max, Long min) throws ApiException {
        ApiResponse<List<ContractNftSellUtxo>> localVarResp = contractNftSellGenesisCodeHashGenesisUtxoGetWithHttpInfo(codeHash, genesis, tokenIndex, max, min);
        return localVarResp.getData();
    }

    /**
     * Get all contract nft token utxos by codeHash and genesisId.
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @return ApiResponse&lt;List&lt;ContractNftSellUtxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContractNftSellUtxo>> contractNftSellGenesisCodeHashGenesisUtxoGetWithHttpInfo(String codeHash, String genesis, Long tokenIndex, Long max, Long min) throws ApiException {
        okhttp3.Call localVarCall = contractNftSellGenesisCodeHashGenesisUtxoGetValidateBeforeCall(codeHash, genesis, tokenIndex, max, min, null);
        Type localVarReturnType = new TypeToken<List<ContractNftSellUtxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all contract nft token utxos by codeHash and genesisId. (asynchronously)
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftSellGenesisCodeHashGenesisUtxoGetAsync(String codeHash, String genesis, Long tokenIndex, Long max, Long min, final ApiCallback<List<ContractNftSellUtxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractNftSellGenesisCodeHashGenesisUtxoGetValidateBeforeCall(codeHash, genesis, tokenIndex, max, min, _callback);
        Type localVarReturnType = new TypeToken<List<ContractNftSellUtxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractNftSellV2AddressAddressUtxoGet
     * @param address Owner address. (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftSellV2AddressAddressUtxoGetCall(String address, String codeHash, String genesis, String flag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/nft/sellV2/address/{address}/utxo"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeHash", codeHash));
        }

        if (genesis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genesis", genesis));
        }

        if (flag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flag", flag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractNftSellV2AddressAddressUtxoGetValidateBeforeCall(String address, String codeHash, String genesis, String flag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling contractNftSellV2AddressAddressUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = contractNftSellV2AddressAddressUtxoGetCall(address, codeHash, genesis, flag, _callback);
        return localVarCall;

    }

    /**
     * Get all contract sell sell utxos for specific address.
     * 
     * @param address Owner address. (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @return List&lt;ContractNftSellV2Utxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public List<ContractNftSellV2Utxo> contractNftSellV2AddressAddressUtxoGet(String address, String codeHash, String genesis, String flag) throws ApiException {
        ApiResponse<List<ContractNftSellV2Utxo>> localVarResp = contractNftSellV2AddressAddressUtxoGetWithHttpInfo(address, codeHash, genesis, flag);
        return localVarResp.getData();
    }

    /**
     * Get all contract sell sell utxos for specific address.
     * 
     * @param address Owner address. (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @return ApiResponse&lt;List&lt;ContractNftSellV2Utxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContractNftSellV2Utxo>> contractNftSellV2AddressAddressUtxoGetWithHttpInfo(String address, String codeHash, String genesis, String flag) throws ApiException {
        okhttp3.Call localVarCall = contractNftSellV2AddressAddressUtxoGetValidateBeforeCall(address, codeHash, genesis, flag, null);
        Type localVarReturnType = new TypeToken<List<ContractNftSellV2Utxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all contract sell sell utxos for specific address. (asynchronously)
     * 
     * @param address Owner address. (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftSellV2AddressAddressUtxoGetAsync(String address, String codeHash, String genesis, String flag, final ApiCallback<List<ContractNftSellV2Utxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractNftSellV2AddressAddressUtxoGetValidateBeforeCall(address, codeHash, genesis, flag, _callback);
        Type localVarReturnType = new TypeToken<List<ContractNftSellV2Utxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractNftSellV2GenesisCodeHashGenesisUtxoGet
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftSellV2GenesisCodeHashGenesisUtxoGetCall(String codeHash, String genesis, Long tokenIndex, Long max, Long min, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/nft/sellV2/genesis/{codeHash}/{genesis}/utxo"
            .replaceAll("\\{" + "codeHash" + "\\}", localVarApiClient.escapeString(codeHash.toString()))
            .replaceAll("\\{" + "genesis" + "\\}", localVarApiClient.escapeString(genesis.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tokenIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tokenIndex", tokenIndex));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (min != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min", min));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractNftSellV2GenesisCodeHashGenesisUtxoGetValidateBeforeCall(String codeHash, String genesis, Long tokenIndex, Long max, Long min, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeHash' is set
        if (codeHash == null) {
            throw new ApiException("Missing the required parameter 'codeHash' when calling contractNftSellV2GenesisCodeHashGenesisUtxoGet(Async)");
        }
        
        // verify the required parameter 'genesis' is set
        if (genesis == null) {
            throw new ApiException("Missing the required parameter 'genesis' when calling contractNftSellV2GenesisCodeHashGenesisUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = contractNftSellV2GenesisCodeHashGenesisUtxoGetCall(codeHash, genesis, tokenIndex, max, min, _callback);
        return localVarCall;

    }

    /**
     * Get all contract nft token utxos by codeHash and genesisId.
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @return List&lt;ContractNftSellV2Utxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public List<ContractNftSellV2Utxo> contractNftSellV2GenesisCodeHashGenesisUtxoGet(String codeHash, String genesis, Long tokenIndex, Long max, Long min) throws ApiException {
        ApiResponse<List<ContractNftSellV2Utxo>> localVarResp = contractNftSellV2GenesisCodeHashGenesisUtxoGetWithHttpInfo(codeHash, genesis, tokenIndex, max, min);
        return localVarResp.getData();
    }

    /**
     * Get all contract nft token utxos by codeHash and genesisId.
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @return ApiResponse&lt;List&lt;ContractNftSellV2Utxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContractNftSellV2Utxo>> contractNftSellV2GenesisCodeHashGenesisUtxoGetWithHttpInfo(String codeHash, String genesis, Long tokenIndex, Long max, Long min) throws ApiException {
        okhttp3.Call localVarCall = contractNftSellV2GenesisCodeHashGenesisUtxoGetValidateBeforeCall(codeHash, genesis, tokenIndex, max, min, null);
        Type localVarReturnType = new TypeToken<List<ContractNftSellV2Utxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all contract nft token utxos by codeHash and genesisId. (asynchronously)
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractNftSellV2GenesisCodeHashGenesisUtxoGetAsync(String codeHash, String genesis, Long tokenIndex, Long max, Long min, final ApiCallback<List<ContractNftSellV2Utxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractNftSellV2GenesisCodeHashGenesisUtxoGetValidateBeforeCall(codeHash, genesis, tokenIndex, max, min, _callback);
        Type localVarReturnType = new TypeToken<List<ContractNftSellV2Utxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contractUniqueGenesisCodeHashGenesisUtxoGet
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract unique utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractUniqueGenesisCodeHashGenesisUtxoGetCall(String codeHash, String genesis, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/unique/genesis/{codeHash}/{genesis}/utxo"
            .replaceAll("\\{" + "codeHash" + "\\}", localVarApiClient.escapeString(codeHash.toString()))
            .replaceAll("\\{" + "genesis" + "\\}", localVarApiClient.escapeString(genesis.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contractUniqueGenesisCodeHashGenesisUtxoGetValidateBeforeCall(String codeHash, String genesis, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeHash' is set
        if (codeHash == null) {
            throw new ApiException("Missing the required parameter 'codeHash' when calling contractUniqueGenesisCodeHashGenesisUtxoGet(Async)");
        }
        
        // verify the required parameter 'genesis' is set
        if (genesis == null) {
            throw new ApiException("Missing the required parameter 'genesis' when calling contractUniqueGenesisCodeHashGenesisUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = contractUniqueGenesisCodeHashGenesisUtxoGetCall(codeHash, genesis, _callback);
        return localVarCall;

    }

    /**
     * Get contract unique utxos by codeHash and genesisId.
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @return List&lt;ContractUniqueUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract unique utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public List<ContractUniqueUtxo> contractUniqueGenesisCodeHashGenesisUtxoGet(String codeHash, String genesis) throws ApiException {
        ApiResponse<List<ContractUniqueUtxo>> localVarResp = contractUniqueGenesisCodeHashGenesisUtxoGetWithHttpInfo(codeHash, genesis);
        return localVarResp.getData();
    }

    /**
     * Get contract unique utxos by codeHash and genesisId.
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @return ApiResponse&lt;List&lt;ContractUniqueUtxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract unique utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContractUniqueUtxo>> contractUniqueGenesisCodeHashGenesisUtxoGetWithHttpInfo(String codeHash, String genesis) throws ApiException {
        okhttp3.Call localVarCall = contractUniqueGenesisCodeHashGenesisUtxoGetValidateBeforeCall(codeHash, genesis, null);
        Type localVarReturnType = new TypeToken<List<ContractUniqueUtxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get contract unique utxos by codeHash and genesisId. (asynchronously)
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get contract unique utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contractUniqueGenesisCodeHashGenesisUtxoGetAsync(String codeHash, String genesis, final ApiCallback<List<ContractUniqueUtxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contractUniqueGenesisCodeHashGenesisUtxoGetValidateBeforeCall(codeHash, genesis, _callback);
        Type localVarReturnType = new TypeToken<List<ContractUniqueUtxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
