/*
 * MetaSV API Spec
 * API definition for MetaSV provided apis
 *
 * The version of the OpenAPI document: 2.2.1
 * Contact: heqiming@metasv.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.metasv.mvc.client.openapi.api;

import com.metasv.mvc.client.openapi.ApiCallback;
import com.metasv.mvc.client.openapi.ApiClient;
import com.metasv.mvc.client.openapi.ApiException;
import com.metasv.mvc.client.openapi.ApiResponse;
import com.metasv.mvc.client.openapi.Configuration;
import com.metasv.mvc.client.openapi.Pair;
import com.metasv.mvc.client.openapi.ProgressRequestBody;
import com.metasv.mvc.client.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.metasv.mvc.client.openapi.model.XpubAddress;
import com.metasv.mvc.client.openapi.model.XpubLiteBalance;
import com.metasv.mvc.client.openapi.model.XpubUtxo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class XpubApi {
    private ApiClient localVarApiClient;

    public XpubApi() {
        this(Configuration.getDefaultApiClient());
    }

    public XpubApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for xpubLiteXpubAddressAddressGet
     * @param xpub the requested xpub (required)
     * @param address the requested address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get xpub address success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found in the xpub. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call xpubLiteXpubAddressAddressGetCall(String xpub, String address, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/xpubLite/{xpub}/address/{address}"
            .replaceAll("\\{" + "xpub" + "\\}", localVarApiClient.escapeString(xpub.toString()))
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call xpubLiteXpubAddressAddressGetValidateBeforeCall(String xpub, String address, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xpub' is set
        if (xpub == null) {
            throw new ApiException("Missing the required parameter 'xpub' when calling xpubLiteXpubAddressAddressGet(Async)");
        }
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling xpubLiteXpubAddressAddressGet(Async)");
        }
        

        okhttp3.Call localVarCall = xpubLiteXpubAddressAddressGetCall(xpub, address, _callback);
        return localVarCall;

    }

    /**
     * Get xpub address type and index. Only index under /0/70 /1/30 is valid. Otherwise not found.
     * 
     * @param xpub the requested xpub (required)
     * @param address the requested address (required)
     * @return XpubAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get xpub address success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found in the xpub. </td><td>  -  </td></tr>
     </table>
     */
    public XpubAddress xpubLiteXpubAddressAddressGet(String xpub, String address) throws ApiException {
        ApiResponse<XpubAddress> localVarResp = xpubLiteXpubAddressAddressGetWithHttpInfo(xpub, address);
        return localVarResp.getData();
    }

    /**
     * Get xpub address type and index. Only index under /0/70 /1/30 is valid. Otherwise not found.
     * 
     * @param xpub the requested xpub (required)
     * @param address the requested address (required)
     * @return ApiResponse&lt;XpubAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get xpub address success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found in the xpub. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<XpubAddress> xpubLiteXpubAddressAddressGetWithHttpInfo(String xpub, String address) throws ApiException {
        okhttp3.Call localVarCall = xpubLiteXpubAddressAddressGetValidateBeforeCall(xpub, address, null);
        Type localVarReturnType = new TypeToken<XpubAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get xpub address type and index. Only index under /0/70 /1/30 is valid. Otherwise not found. (asynchronously)
     * 
     * @param xpub the requested xpub (required)
     * @param address the requested address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get xpub address success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found in the xpub. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call xpubLiteXpubAddressAddressGetAsync(String xpub, String address, final ApiCallback<XpubAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = xpubLiteXpubAddressAddressGetValidateBeforeCall(xpub, address, _callback);
        Type localVarReturnType = new TypeToken<XpubAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for xpubLiteXpubBalanceGet
     * @param xpub the xpub to search (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get xpub balance success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call xpubLiteXpubBalanceGetCall(String xpub, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/xpubLite/{xpub}/balance"
            .replaceAll("\\{" + "xpub" + "\\}", localVarApiClient.escapeString(xpub.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call xpubLiteXpubBalanceGetValidateBeforeCall(String xpub, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xpub' is set
        if (xpub == null) {
            throw new ApiException("Missing the required parameter 'xpub' when calling xpubLiteXpubBalanceGet(Async)");
        }
        

        okhttp3.Call localVarCall = xpubLiteXpubBalanceGetCall(xpub, _callback);
        return localVarCall;

    }

    /**
     * Get xpub balances including confirmed and unconfirmed.
     * This api returns confirmed balance(same as address balance), not sumed utxos.
     * @param xpub the xpub to search (required)
     * @return XpubLiteBalance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get xpub balance success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public XpubLiteBalance xpubLiteXpubBalanceGet(String xpub) throws ApiException {
        ApiResponse<XpubLiteBalance> localVarResp = xpubLiteXpubBalanceGetWithHttpInfo(xpub);
        return localVarResp.getData();
    }

    /**
     * Get xpub balances including confirmed and unconfirmed.
     * This api returns confirmed balance(same as address balance), not sumed utxos.
     * @param xpub the xpub to search (required)
     * @return ApiResponse&lt;XpubLiteBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get xpub balance success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<XpubLiteBalance> xpubLiteXpubBalanceGetWithHttpInfo(String xpub) throws ApiException {
        okhttp3.Call localVarCall = xpubLiteXpubBalanceGetValidateBeforeCall(xpub, null);
        Type localVarReturnType = new TypeToken<XpubLiteBalance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get xpub balances including confirmed and unconfirmed. (asynchronously)
     * This api returns confirmed balance(same as address balance), not sumed utxos.
     * @param xpub the xpub to search (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get xpub balance success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call xpubLiteXpubBalanceGetAsync(String xpub, final ApiCallback<XpubLiteBalance> _callback) throws ApiException {

        okhttp3.Call localVarCall = xpubLiteXpubBalanceGetValidateBeforeCall(xpub, _callback);
        Type localVarReturnType = new TypeToken<XpubLiteBalance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for xpubLiteXpubUtxoGet
     * @param xpub the requested xpub (required)
     * @param limit The max items returned in this query(default 300), not bigger than 5000. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get xpub utxos success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call xpubLiteXpubUtxoGetCall(String xpub, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/xpubLite/{xpub}/utxo"
            .replaceAll("\\{" + "xpub" + "\\}", localVarApiClient.escapeString(xpub.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call xpubLiteXpubUtxoGetValidateBeforeCall(String xpub, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xpub' is set
        if (xpub == null) {
            throw new ApiException("Missing the required parameter 'xpub' when calling xpubLiteXpubUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = xpubLiteXpubUtxoGetCall(xpub, limit, _callback);
        return localVarCall;

    }

    /**
     * Get xpub utxos by specific xpub(300 per page).
     * 
     * @param xpub the requested xpub (required)
     * @param limit The max items returned in this query(default 300), not bigger than 5000. (optional)
     * @return List&lt;XpubUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get xpub utxos success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<XpubUtxo> xpubLiteXpubUtxoGet(String xpub, Integer limit) throws ApiException {
        ApiResponse<List<XpubUtxo>> localVarResp = xpubLiteXpubUtxoGetWithHttpInfo(xpub, limit);
        return localVarResp.getData();
    }

    /**
     * Get xpub utxos by specific xpub(300 per page).
     * 
     * @param xpub the requested xpub (required)
     * @param limit The max items returned in this query(default 300), not bigger than 5000. (optional)
     * @return ApiResponse&lt;List&lt;XpubUtxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get xpub utxos success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<XpubUtxo>> xpubLiteXpubUtxoGetWithHttpInfo(String xpub, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = xpubLiteXpubUtxoGetValidateBeforeCall(xpub, limit, null);
        Type localVarReturnType = new TypeToken<List<XpubUtxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get xpub utxos by specific xpub(300 per page). (asynchronously)
     * 
     * @param xpub the requested xpub (required)
     * @param limit The max items returned in this query(default 300), not bigger than 5000. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get xpub utxos success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call xpubLiteXpubUtxoGetAsync(String xpub, Integer limit, final ApiCallback<List<XpubUtxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = xpubLiteXpubUtxoGetValidateBeforeCall(xpub, limit, _callback);
        Type localVarReturnType = new TypeToken<List<XpubUtxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
